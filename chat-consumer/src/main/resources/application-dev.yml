opensearch:
  host: localhost
  port: 9200
  username: admin
  password: Developer@123
  scheme: https
  index:
    chat:
      name: chat-index

spring:
  kafka:
    bootstrap-servers: localhost:29092  # 로컬 개발 환경에서는 localhost:9092를 사용합니다.
    consumer:
      bootstrap-servers: localhost:29092
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
      enable-auto-commit: false
      auto-offset-reset: earliest
    producer:
      bootstrap-servers: localhost:29092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      properties:
        enable.idempotence: true

  datasource:
    url: jdbc:mysql://localhost:3306/chatdb
    username: chat
    password: chat1234
    driver-class-name: com.mysql.cj.jdbc.Driver

  redis:
    host: localhost
    port: 6379  # 개발 환경

  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        show_sql: false    # SQL 쿼리 숨기기
        format_sql: false  # SQL 포맷팅 비활성화

logging.level:
  org.hibernate.SQL: OFF   # Hibernate SQL 로깅 끄기
  org.hibernate.type.descriptor.sql: OFF  # SQL 파라미터 로깅 끄기
  root: info              # 다른 로그는 info 레벨 유지
  org.springframework: info
  com.sns.project: debug  # 프로젝트 로그는 debug 레벨 유지
server:
  port: 8081

# 참고: 만약 도커 환경에서 'kafka' 호스트명을 사용하는 경우 
# /etc/hosts 파일에 '127.0.0.1 kafka' 항목을 추가해야 합니다.
